#include<bits/stdc++.h>

using namespace std;

mt19937 rnd(1337);
uniform_int_distribution<long long>r(1e8, ((long long) 1e9) - 1);

vector<vector<long double>> primeses{{0.6946, 1.9542, 0.6969, 0.9669, 0.6998, 0.7003, 0.717, 0.9325, 0.7052, 0.9326},
{0.7002, 1.4476, 1.2012, 0.9513, 0.6921, 0.7064, 0.7024, 0.9422, 0.7082, 0.9484},
{0.702, 1.2885, 1.0139, 1.2784, 0.7027, 0.7106, 0.6988, 0.9513, 0.681, 0.9728},
{0.7013, 1.2085, 0.9423, 1.1959, 0.9425, 0.6865, 0.7056, 0.9712, 0.701, 0.9452},
{0.6971, 1.1585, 0.8885, 1.1569, 0.8933, 0.901, 0.7054, 0.9427, 0.7056, 0.951},
{0.7116, 1.1202, 0.8594, 1.1149, 0.8718, 0.856, 0.8733, 0.9399, 0.6939, 0.959},
{0.7052, 1.0929, 0.8427, 1.1029, 0.8335, 0.8535, 0.8434, 1.0773, 0.6942, 0.9544},
{0.6977, 1.0788, 0.8304, 1.0743, 0.8093, 0.8222, 0.8231, 1.0724, 0.8348, 0.957},
{0.6993, 1.0724, 0.8289, 1.0426, 0.8085, 0.8207, 0.8091, 1.0655, 0.7949, 1.0581},
{0.6877, 0.9381, 1.6929, 0.9582, 0.7142, 0.7042, 0.699, 0.9774, 0.6985, 0.9298},
{0.7003, 0.9519, 1.218, 1.4401, 0.7034, 0.6971, 0.6982, 0.9418, 0.6959, 0.9533},
{0.6961, 0.9533, 1.0382, 1.2934, 1.0219, 0.7014, 0.7121, 0.938, 0.6935, 0.9521},
{0.6977, 0.946, 0.961, 1.1918, 0.9399, 0.9438, 0.694, 0.9551, 0.7114, 0.9593},
{0.6995, 0.971, 0.9214, 1.1287, 0.9055, 0.8906, 0.8841, 0.9508, 0.6966, 0.9518},
{0.6945, 0.9279, 0.8705, 1.1173, 0.8761, 0.8595, 0.871, 1.1303, 0.6942, 0.9587},
{0.6895, 0.9355, 0.841, 1.0759, 0.8347, 0.8432, 0.8565, 1.112, 0.8445, 0.9672},
{0.6992, 0.9489, 0.8347, 1.1005, 0.8258, 0.8125, 0.8293, 1.0863, 0.8164, 1.0464},
{0.713, 0.9453, 0.7174, 1.9493, 0.6976, 0.7045, 0.6925, 0.9486, 0.6997, 0.9321},
{0.7095, 0.9456, 0.7032, 1.4538, 1.1931, 0.693, 0.7056, 0.9446, 0.7056, 0.946},
{0.7008, 0.9498, 0.6996, 1.2872, 1.0302, 1.0288, 0.7037, 0.9409, 0.6992, 0.9598},
{0.6986, 0.9417, 0.6979, 1.205, 0.9508, 0.961, 0.9444, 0.9542, 0.7032, 0.9432},
{0.684, 0.9544, 0.7068, 1.1742, 0.8996, 0.902, 0.9019, 1.1283, 0.7103, 0.9385},
{0.6918, 0.9638, 0.6976, 1.118, 0.8598, 0.8661, 0.874, 1.11, 0.8565, 0.9624},
{0.7026, 0.9488, 0.7002, 1.101, 0.8514, 0.8549, 0.834, 1.0816, 0.8265, 1.099},
{0.6958, 0.9337, 0.6944, 0.9352, 1.7116, 0.7046, 0.6983, 0.9562, 0.7089, 0.9613},
{0.7074, 0.9477, 0.7036, 0.9628, 1.1943, 1.1947, 0.7106, 0.9483, 0.6936, 0.937},
{0.6973, 0.9497, 0.6952, 0.9552, 1.027, 1.0433, 1.0286, 0.955, 0.7018, 0.9469},
{0.7015, 0.9508, 0.6938, 0.9538, 0.9449, 0.9554, 0.9328, 1.202, 0.7126, 0.9524},
{0.6995, 0.9494, 0.7046, 0.9489, 0.9073, 0.9012, 0.9024, 1.1418, 0.8862, 0.9587},
{0.6933, 0.9407, 0.6969, 0.9334, 0.8587, 0.8694, 0.8683, 1.1259, 0.8735, 1.1399},
{0.7067, 0.9473, 0.6986, 0.9474, 0.7089, 1.6887, 0.7098, 0.9393, 0.6951, 0.9582},
{0.707, 0.9397, 0.7045, 0.9582, 0.7037, 1.2131, 1.1914, 0.9574, 0.6863, 0.9387},
{0.7006, 0.9499, 0.7055, 0.9675, 0.6984, 1.0524, 1.0385, 1.2606, 0.6846, 0.942},
{0.7006, 0.9625, 0.7028, 0.9464, 0.7042, 0.9521, 0.9529, 1.189, 0.9381, 0.9514},
{0.7025, 0.9479, 0.6954, 0.9607, 0.6997, 0.9207, 0.9034, 1.1273, 0.8957, 1.1467},
{0.7064, 0.9544, 0.7068, 0.9391, 0.6918, 0.6975, 1.7225, 0.9515, 0.6903, 0.9397},
{0.7125, 0.9428, 0.6983, 0.9475, 0.6938, 0.7032, 1.1871, 1.4599, 0.7025, 0.9524},
{0.6973, 0.9525, 0.6908, 0.9546, 0.7066, 0.7115, 1.0302, 1.2715, 1.0388, 0.9462},
{0.7045, 0.9524, 0.6883, 0.9502, 0.7272, 0.6853, 0.938, 1.2037, 0.9554, 1.195},
{0.7023, 0.9491, 0.6953, 0.9494, 0.7164, 0.7006, 0.6933, 1.9449, 0.6981, 0.9506},
{0.693, 0.9466, 0.6958, 0.9662, 0.7081, 0.7152, 0.7052, 1.443, 1.198, 0.9289},
{0.7032, 0.9398, 0.71, 0.9446, 0.7005, 0.6928, 0.6935, 1.3088, 1.0262, 1.2806},
{0.6956, 0.9569, 0.7041, 0.9462, 0.7032, 0.701, 0.6946, 0.9513, 1.6975, 0.9496},
{0.7, 0.959, 0.6934, 0.9458, 0.7018, 0.6932, 0.6996, 0.9641, 1.2113, 1.4318},
{0.7062, 0.9607, 0.6947, 0.9505, 0.6913, 0.7076, 0.7034, 0.9337, 0.6939, 1.958}};

vector<vector<long double>> noxus{{0.7955, 1.8015, 0.8025, 0.8055, 0.7961, 0.8085, 0.7961, 0.7917, 0.7972, 0.8054},
{0.7948, 1.3126, 1.3098, 0.7994, 0.7782, 0.7989, 0.8103, 0.7984, 0.801, 0.7966},
{0.7987, 1.1372, 1.1259, 1.1368, 0.8056, 0.8074, 0.8092, 0.7881, 0.796, 0.7951},
{0.7935, 1.0623, 1.0263, 1.0735, 1.0478, 0.809, 0.8099, 0.8057, 0.7835, 0.7885},
{0.803, 0.9986, 1.0074, 1.0013, 1.0011, 0.9977, 0.7993, 0.7993, 0.7972, 0.7951},
{0.7825, 0.9808, 0.9687, 0.9628, 0.9744, 0.9684, 0.9697, 0.79, 0.8034, 0.7993},
{0.7892, 0.9468, 0.9432, 0.9426, 0.9477, 0.9433, 0.9428, 0.9395, 0.7947, 0.8102},
{0.8007, 0.9285, 0.9335, 0.9085, 0.9236, 0.9201, 0.9251, 0.9161, 0.9316, 0.8123},
{0.7939, 0.9113, 0.8964, 0.9289, 0.9063, 0.9091, 0.9154, 0.9199, 0.9111, 0.9077},
{0.7966, 0.8035, 1.7773, 0.8076, 0.8033, 0.7999, 0.8029, 0.8047, 0.7968, 0.8074},
{0.8152, 0.8025, 1.3076, 1.3048, 0.8016, 0.8058, 0.782, 0.8015, 0.7927, 0.7863},
{0.803, 0.7852, 1.136, 1.1437, 1.1327, 0.8027, 0.8083, 0.8042, 0.7933, 0.7909},
{0.8049, 0.7932, 1.0461, 1.0475, 1.0604, 1.0362, 0.7981, 0.8013, 0.798, 0.8143},
{0.7839, 0.8004, 1.017, 1.0008, 0.9879, 1.0039, 1.0073, 0.7962, 0.7971, 0.8055},
{0.7995, 0.7991, 0.9581, 0.9747, 0.9692, 0.9529, 0.9692, 0.9636, 0.8014, 0.8123},
{0.8106, 0.7961, 0.9289, 0.9405, 0.9438, 0.9332, 0.945, 0.9668, 0.935, 0.8001},
{0.815, 0.8066, 0.9344, 0.9381, 0.9063, 0.9172, 0.9069, 0.9392, 0.9215, 0.9148},
{0.8002, 0.7927, 0.7937, 1.8001, 0.808, 0.8103, 0.804, 0.7979, 0.7972, 0.7959},
{0.8015, 0.7843, 0.8055, 1.2879, 1.3048, 0.7968, 0.8103, 0.8031, 0.8046, 0.8012},
{0.7969, 0.7982, 0.7948, 1.1284, 1.1357, 1.1259, 0.8105, 0.8025, 0.7976, 0.8095},
{0.7939, 0.7937, 0.8108, 1.042, 1.0703, 1.0446, 1.0521, 0.796, 0.7866, 0.81},
{0.8028, 0.8096, 0.8028, 0.9973, 1.0062, 0.9958, 0.9976, 0.9988, 0.7934, 0.7957},
{0.8019, 0.7955, 0.7894, 0.9539, 0.9683, 0.9629, 0.9721, 0.9752, 0.9779, 0.8029},
{0.8042, 0.7928, 0.7984, 0.9434, 0.9498, 0.9375, 0.9317, 0.9573, 0.944, 0.9409},
{0.7977, 0.8067, 0.793, 0.8197, 1.785, 0.7901, 0.8014, 0.8105, 0.7897, 0.8062},
{0.7934, 0.8095, 0.7984, 0.7912, 1.3016, 1.2967, 0.7959, 0.8087, 0.803, 0.8016},
{0.7966, 0.8018, 0.799, 0.8071, 1.1477, 1.1399, 1.1056, 0.7908, 0.7966, 0.8149},
{0.7955, 0.8092, 0.8017, 0.803, 1.0503, 1.0516, 1.053, 1.0506, 0.7936, 0.7915},
{0.8124, 0.7976, 0.7876, 0.8027, 0.9842, 1.0035, 0.9927, 1.0094, 0.996, 0.8139},
{0.7976, 0.7939, 0.7995, 0.8098, 0.9712, 0.9636, 0.9798, 0.9582, 0.9637, 0.9627},
{0.7963, 0.7707, 0.8227, 0.8019, 0.8101, 1.7982, 0.7849, 0.7985, 0.8131, 0.8036},
{0.7928, 0.8105, 0.8033, 0.789, 0.7893, 1.2978, 1.3066, 0.806, 0.7885, 0.8162},
{0.7974, 0.8184, 0.8006, 0.8074, 0.7984, 1.1275, 1.1213, 1.124, 0.7936, 0.8114},
{0.7899, 0.8169, 0.7992, 0.8064, 0.799, 1.0375, 1.0448, 1.0504, 1.0524, 0.8035},
{0.7959, 0.7987, 0.7987, 0.7978, 0.7907, 1.0159, 1.0022, 1.0069, 0.9885, 1.0047},
{0.7892, 0.8136, 0.7908, 0.8095, 0.8069, 0.8026, 1.7946, 0.8095, 0.791, 0.7923},
{0.8, 0.8068, 0.8095, 0.8008, 0.7906, 0.809, 1.2821, 1.3065, 0.802, 0.7927},
{0.8057, 0.8096, 0.8024, 0.7985, 0.7904, 0.7931, 1.1274, 1.1422, 1.1323, 0.7984},
{0.7874, 0.8004, 0.8113, 0.8008, 0.8021, 0.7983, 1.0597, 1.0456, 1.0377, 1.0567},
{0.8197, 0.7934, 0.7972, 0.7863, 0.8063, 0.7835, 0.8149, 1.7948, 0.7995, 0.8044},
{0.7977, 0.8063, 0.7949, 0.7939, 0.8026, 0.7948, 0.782, 1.3157, 1.2998, 0.8123},
{0.8057, 0.7949, 0.8084, 0.7972, 0.7997, 0.81, 0.7967, 1.1408, 1.0908, 1.1558},
{0.8092, 0.7987, 0.7968, 0.7952, 0.8184, 0.8026, 0.7793, 0.804, 1.8046, 0.7912},
{0.7991, 0.7953, 0.7967, 0.793, 0.7993, 0.8101, 0.7922, 0.7942, 1.3136, 1.3065},
{0.7888, 0.7959, 0.7985, 0.8097, 0.7967, 0.8057, 0.8087, 0.81, 0.793, 1.793}};


vector<long double> get_primes(int a, int b)
{
    int n = 1e4;

    vector<int> ans;
    while(ans.size() < n)
    {
        int val = r(rnd);

        string str = to_string(val);
        if(str[0] - '0' < a || b < str[0] - '0')
        {
            continue;
        }

        bool fl = true;
        for(int i = 2; i * i <= val; ++i)
        {
            if(val % i == 0)
            {
                fl = false;
                break;
            }
        }
        if(fl)
        {
            ans.push_back(val);
        }
    }


    vector<long double> cnt(10);

    for(int i = 0; i < ans.size(); ++i)
    {
        int val = ans[i];
        for(int j = 0; j < 9; ++j)
        {
            cnt[val % 10]++;
            val /= 10;
        }
    }

    for(int i = 0; i < cnt.size(); ++i)
    {
        cnt[i] /= n;
    }

    return cnt;
}


vector<long double> get_nex(int a, int b)
{
    int n = 2e4;

    vector<int> ans;
    while(ans.size() < n)
    {
        int val = r(rnd);
        string str = to_string(val);

        if(str[0] - '0' < a || b < str[0] - '0')
        {
            continue;
        }

        if(val % 3 == 0)
        {
            continue;
        }

        int gg = 0;
        for(int i = 0; i < str.size(); ++i)
        {
            if((str[i] - '0') % 2 == 1)
            {
                ++gg;
                break;
            }
        }
        if(gg == 0)
        {
            continue;
        }

        ans.push_back(val);
    }

    vector<long double> cnt(10);

    for(int i = 0; i < ans.size(); ++i)
    {
        int val = ans[i];
        for(int j = 0; j < 9; ++j)
        {
            cnt[val % 10]++;
            val /= 10;
        }
    }

    for(int i = 0; i < cnt.size(); ++i)
    {
        cnt[i] /= n;
    }

    return cnt;

}


long double get_dist(vector<long double> a, vector<long double> b)
{
    long double ans = 0;
    for(int i = 0; i < a.size(); ++i)
    {
        ans += (a[i] - b[i]) * (a[i] - b[i]);
    }
    return ans;
}

int main()
{
    cout.setf(ios::fixed);
    cout.precision(8);

    // ofstream out("output.txt");

    // for(int a = 1; a <= 9; ++a)
    // {
    //     for(int b = a; b <= 9; ++b)
    //     {
    //         vector<long double> vec = get_primes(a, b);
    //         out << "{";
    //         for(int i = 0; i < vec.size(); ++i)
    //         {
    //             out << vec[i];
    //             if(i != vec.size() - 1)
    //             {
    //                 out << ", ";
    //             }
    //         }
    //         out << "},\n";
    //     }
    // }
    // return 0;
    

    int n = 2e4;

    vector<long double> raspr(10);


    for(int i = 0; i < n; ++i)
    {
        long long a;
        cin >> a;
        for(int j = 0; j < 9; ++j)
        {
            ++raspr[a%10];
            a/=10;
        }
    }

    for(int i = 0; i < raspr.size(); ++i)
    {
        raspr[i] /= n;
    }

    long double mn = 1e9;

    vector<int> ans;

    int num = 0;

    for(int a = 1; a <= 9; ++a)
    {
        for(int b = a; b <= 9; ++b)
        {
            // long double dist = get_dist(raspr, get_primes(a, b));
            long double dist = get_dist(raspr, primeses[num]);
            ++num;
            if(dist < mn)
            {
                mn = dist;
                ans = {1, a, b};
            }
        }
    }

    num = 0;

    for(int a = 1; a <= 9; ++a)
    {
        for(int b = a; b <= 9; ++b)
        {
            long double dist = get_dist(raspr, noxus[num]);
            ++num;
            if(dist < mn)
            {
                mn = dist;
                ans = {0, a, b};
            }
        }
    }

    for(int i = 0; i < ans.size(); ++i)
    {
        cout << ans[i] << ' ';
    }
    cout << '\n';

}






/*


627353756
098260681
565527418
916170955
002014436
367890547
297600503
404350688
766322497
278868805
712897696
568553654
746331676
675458566
155664610
367875236
456558877
002960425
279603475
431296216
469362745
911545525
578183368
564467965
120341054
708967045
498348046
955236970
274161526
491337253
080019152
685915990
097255199
137614927
774153755
119846668
300656395
588416006
141668324
654781886
625956451
563042789
080920267
172574465
796338707
862537369



*/
